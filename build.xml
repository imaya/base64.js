<?xml version="1.0" encoding="utf-8"?>
<project name="project" default="all" >
  <property name="level" value="PERFORMANCE_OPTIMIZATIONS"/>
  <property name="src" value="./src"/>
  <property name="def" value="./define"/>
  <property name="vendor" value="./vendor"/>
  <property name="bin" value="./bin"/>
  <property name="compiler" value="${vendor}/google-closure-compiler/compiler.jar"/>
  <property name="closure_primitives" value="closure-primitives/base.js"/>
  <property name="depswriter" value="closure-primitives/depswriter.py"/>
  <property name="depend" value="deps.js"/>

  <!-- ビルドの事前準備 -->
  <target name="prebuild" description="ビルドの事前準備を行う">
     <mkdir dir="${bin}"/>
  </target>

  <!-- polyfill として作成 -->
  <target name="polyfill" depends="prebuild" description="build">
    <!-- 出力ファイル名 -->
    <local name="outfile"/>
    <property name="outfile" value="${bin}/base64_polyfill.min.js"/>
    <!-- ビルド(出力先は一時ファイル) -->
    <java jar="${compiler}" fork="true" failonerror="true">
      <arg line="--warning_level=VERBOSE"/>
      <arg line="--compilation_level=${level}"/>
      <arg line="--define=BASE64_BTOA_STRICT=true"/>
      <arg line="--output_wrapper='(function() {%output%}).call(this);'"/>
      <arg line="--summary_detail_level=3"/>
      <arg line="--language_in=ECMASCRIPT5_STRICT"/>
      <arg line="--js_output_file=${outfile}.tmp"/>
      <arg line="--only_closure_dependencies=true"/>
      <arg line="--closure_entry_point Polyfill"/>
      <arg line="--process_closure_primitives=true"/>
      <arg line="${src}/base64.js"/>
      <arg line="${src}/polyfill.js"/>
    </java>
    <!-- ライセンスとビルドされたファイルをプロパティとして読み込む -->
    <local name="license"/>
    <loadfile property="license" srcfile="./LICENSE.short"/>
    <local name="output"/>
    <loadfile property="output" srcfile="${outfile}.tmp"/>
    <!-- ライセンスとビルドされたファイルの結合 -->
    <echo file="${outfile}" append="no" message="${license}"/>
    <echo file="${outfile}" append="yes" message="${output}"/>
    <fixcrlf file="${outfile}" eol="unix" eof="remove"/>
    <!-- 一時ファイルの削除 -->
    <delete file="${outfile}.tmp"/>
  </target>

  <!-- Base64 library として作成 -->
  <target name="library" depends="prebuild" description="build">
    <!-- 出力ファイル名 -->
    <local name="outfile"/>
    <property name="outfile" value="${bin}/base64.min.js"/>
    <!-- ビルド(出力先は一時ファイル) -->
    <java jar="${compiler}" fork="true" failonerror="true">
        <arg line="--warning_level=VERBOSE"/>
        <arg line="--compilation_level=${level}"/>
        <arg line="--define=BASE64_BTOA_STRICT=false"/>
        <arg line="--output_wrapper='(function() {%output%}).call(this);'"/>
        <arg line="--summary_detail_level=3"/>
        <arg line="--language_in=ECMASCRIPT5_STRICT"/>
        <arg line="--js_output_file=${outfile}.tmp"/>
        <arg line="--only_closure_dependencies=true"/>
        <arg line="--closure_entry_point Library"/>
        <arg line="--process_closure_primitives=true"/>
        <arg line="${src}/library.js"/>
        <arg line="${src}/base64.js"/>
        <arg line="${src}/safari.js"/>
        <arg line="${src}/firefox.js"/>
    </java>
    <!-- ライセンスとビルドされたファイルをプロパティとして読み込む -->
    <local name="license"/>
    <loadfile property="license" srcfile="./LICENSE.short"/>
    <local name="output"/>
    <loadfile property="output" srcfile="${outfile}.tmp"/>
    <!-- ライセンスとビルドされたファイルの結合 -->
    <echo file="${outfile}" append="no" message="${license}"/>
    <echo file="${outfile}" append="yes" message="${output}"/>
    <fixcrlf file="${outfile}" eol="unix" eof="remove"/>
    <!-- 一時ファイルの削除 -->
    <delete file="${outfile}.tmp"/>
  </target>

    <!-- Base64 library として作成(btoaの範囲チェック厳しいバージョン) -->
    <target name="library-strict" depends="prebuild" description="build">
        <!-- 出力ファイル名 -->
        <local name="outfile"/>
        <property name="outfile" value="${bin}/base64_strict.min.js"/>
        <!-- ビルド(出力先は一時ファイル) -->
        <java jar="${compiler}" fork="true" failonerror="true">
            <arg line="--warning_level=VERBOSE"/>
            <arg line="--compilation_level=${level}"/>
            <arg line="--define=BASE64_BTOA_STRICT=true"/>
            <arg line="--output_wrapper='(function() {%output%}).call(this);'"/>
            <arg line="--summary_detail_level=3"/>
            <arg line="--language_in=ECMASCRIPT5_STRICT"/>
            <arg line="--js_output_file=${outfile}.tmp"/>
            <arg line="--only_closure_dependencies=true"/>
            <arg line="--closure_entry_point Library"/>
            <arg line="--process_closure_primitives=true"/>
            <arg line="${src}/library.js"/>
            <arg line="${src}/base64.js"/>
            <arg line="${src}/safari.js"/>
            <arg line="${src}/firefox.js"/>
        </java>
        <!-- ライセンスとビルドされたファイルをプロパティとして読み込む -->
        <local name="license"/>
        <loadfile property="license" srcfile="./LICENSE.short"/>
        <local name="output"/>
        <loadfile property="output" srcfile="${outfile}.tmp"/>
        <!-- ライセンスとビルドされたファイルの結合 -->
        <echo file="${outfile}" append="no" message="${license}"/>
        <echo file="${outfile}" append="yes" message="${output}"/>
        <fixcrlf file="${outfile}" eol="unix" eof="remove"/>
        <!-- 一時ファイルの削除 -->
        <delete file="${outfile}.tmp"/>
    </target>

  <!-- compiler help -->
  <target name="help">
    <java jar="${compiler}" fork="true" failonerror="true">
      <arg line="--help"/>
    </java>
  </target>

  <!-- 全て作成 -->
  <target name="all" depends="library,polyfill,library-strict"/>

  <!--  削除 -->
  <target name="clean">
    <delete file="${depend}"/>
    <delete dir="${bin}"/>
  </target>

  <!-- リビルド -->
  <target name="rebuild" depends="clean,all"/>
</project>
